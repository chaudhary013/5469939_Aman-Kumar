import java.io.*;
import java.math.*;
import java.security.*;
import java.text.*;
import java.util.*;
import java.util.concurrent.*;
import java.util.regex.*;

class Result {

    /*
     * Complete the 'maxSubarray' function below.
     *
     * The function is expected to return an INTEGER_ARRAY.
     * The function accepts INTEGER_ARRAY arr as parameter.
     */






    public static List<Integer> maxSubarray(List<Integer> arr) {
        List<Integer> result = new ArrayList<>();

        // Kadane's algorithm for max subarray sum
        int maxSoFar = arr.get(0);
        int currentMax = arr.get(0);

        for (int i = 1; i < arr.size(); i++) {
            int num = arr.get(i);
            currentMax = Math.max(num, currentMax + num);
            maxSoFar = Math.max(maxSoFar, currentMax);
        }

        // For subsequence: sum of all positive numbers (or max element if all negative)
        int subseqSum = Integer.MIN_VALUE;
        int totalPositives = 0;
        boolean hasPositive = false;

        for (int num : arr) {
            if (num > 0) {
                totalPositives += num;
                hasPositive = true;
            }
            subseqSum = Math.max(subseqSum, num);
        }

        if (hasPositive) subseqSum = totalPositives;

        result.add(maxSoFar);   // max subarray sum
        result.add(subseqSum);  // max subsequence sum
        return result;
    }

}










public class Solution {
    public static void main(String[] args) throws IOException {
        BufferedReader bufferedReader = new BufferedReader(new InputStreamReader(System.in));
        BufferedWriter bufferedWriter = new BufferedWriter(new FileWriter(System.getenv("OUTPUT_PATH")));

        int t = Integer.parseInt(bufferedReader.readLine().trim());

        for (int tItr = 0; tItr < t; tItr++) {
            int n = Integer.parseInt(bufferedReader.readLine().trim());

            String[] arrTemp = bufferedReader.readLine().replaceAll("\\s+$", "").split(" ");

            List<Integer> arr = new ArrayList<>();

            for (int i = 0; i < n; i++) {
                int arrItem = Integer.parseInt(arrTemp[i]);
                arr.add(arrItem);
            }

            List<Integer> result = Result.maxSubarray(arr);

            for (int i = 0; i < result.size(); i++) {
                bufferedWriter.write(String.valueOf(result.get(i)));

                if (i != result.size() - 1) {
                    bufferedWriter.write(" ");
                }
            }

            bufferedWriter.newLine();
        }

        bufferedReader.close();
        bufferedWriter.close();
    }
}
